name: CI/CD Pipeline

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

permissions:
    contents: read
    packages: write

jobs:
    test-and-deploy:
        runs-on: ubuntu-latest
        env:
            REGISTRY: ghcr.io

        steps:
            - uses: actions/checkout@v3

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'

            - name: Install Dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Set image name
              run: |
                  owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
                  echo "Owner: $owner"
                  echo "IMAGE_NAME=${owner}/se_inv_middle_man" >> $GITHUB_ENV
                  echo "Full image name will be: $REGISTRY/${owner}/se_inv"

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v4
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=raw,value=latest,enable=true
                      type=sha,enable=true,priority=100,prefix=,suffix=,format=short

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Build and push Docker image
              id: docker_build
              uses: docker/build-push-action@v4
              with:
                  context: .
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Print Docker build result
              run: |
                  echo "Docker build status: ${{ steps.docker_build.outcome }}"
                  echo "Image digest: ${{ steps.docker_build.outputs.digest }}"
                  echo "Metadata: ${{ steps.meta.outputs.tags }}"

            - name: Verify image exists
              run: |
                  echo "Verifying image exists..."
                  echo "Full image name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
                  docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
                  echo "Image verified successfully!"

            - name: Deploy to Server
              uses: appleboy/ssh-action@master
              env:
                  DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  password: ${{ secrets.SERVER_PASSWORD }}
                  port: 22
                  envs: DOCKER_IMAGE,REGISTRY,IMAGE_NAME
                  script: |
                      echo "Starting deployment..."
                      echo "Using image: $DOCKER_IMAGE"
                      cd ~/middle_man || exit 1

                      # Create necessary directories
                      mkdir -p static staticfiles

                      # Create docker-compose.prod.yml if it doesn't exist
                      if [ ! -f "docker-compose.prod.yml" ]; then
                          echo "Creating docker-compose.prod.yml..."
                          echo "version: '3.8'" > docker-compose.prod.yml
                          echo "" >> docker-compose.prod.yml
                          echo "services:" >> docker-compose.prod.yml
                          echo "    web:" >> docker-compose.prod.yml
                          echo "        image: \${REGISTRY}/\${IMAGE_NAME}:\${TAG:-latest}" >> docker-compose.prod.yml
                          echo "        restart: always" >> docker-compose.prod.yml
                          echo "        ports:" >> docker-compose.prod.yml
                          echo "            - '8030:8000'" >> docker-compose.prod.yml
                          echo "        environment:" >> docker-compose.prod.yml
                          echo "            - SECRET_KEY=1212312121" >> docker-compose.prod.yml
                          echo "            - MQTT_BROKER=oplor.me" >> docker-compose.prod.yml
                          echo "            - MQTT_PORT=1883" >> docker-compose.prod.yml
                          echo "            - DATABASE_URL=postgresql://postgres:1212312121@db:5432/service_website" >> docker-compose.prod.yml
                          echo "            - POSTGRES_DB=service_website" >> docker-compose.prod.yml
                          echo "            - POSTGRES_USER=postgres" >> docker-compose.prod.yml
                          echo "            - POSTGRES_PASSWORD=1212312121" >> docker-compose.prod.yml
                          echo "            - PYTHONPATH=/app" >> docker-compose.prod.yml
                          echo "            - PYTHONUNBUFFERED=1" >> docker-compose.prod.yml
                          echo "        depends_on:" >> docker-compose.prod.yml
                          echo "            db:" >> docker-compose.prod.yml
                          echo "                condition: service_healthy" >> docker-compose.prod.yml
                          echo "" >> docker-compose.prod.yml
                          echo "    db:" >> docker-compose.prod.yml
                          echo "        image: postgres:14" >> docker-compose.prod.yml
                          echo "        restart: always" >> docker-compose.prod.yml
                          echo "        volumes:" >> docker-compose.prod.yml
                          echo "            - postgres_prod_data:/var/lib/postgresql/data" >> docker-compose.prod.yml
                          echo "        environment:" >> docker-compose.prod.yml
                          echo "            - POSTGRES_DB=service_website" >> docker-compose.prod.yml
                          echo "            - POSTGRES_USER=postgres" >> docker-compose.prod.yml
                          echo "            - POSTGRES_PASSWORD=1212312121" >> docker-compose.prod.yml
                          echo "        healthcheck:" >> docker-compose.prod.yml
                          echo "            test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]" >> docker-compose.prod.yml
                          echo "            interval: 10s" >> docker-compose.prod.yml
                          echo "            timeout: 5s" >> docker-compose.prod.yml
                          echo "            retries: 5" >> docker-compose.prod.yml
                          echo "            start_period: 10s" >> docker-compose.prod.yml
                          echo "" >> docker-compose.prod.yml
                          echo "volumes:" >> docker-compose.prod.yml
                          echo "    postgres_prod_data:" >> docker-compose.prod.yml
                      fi

                      echo "Stopping existing containers..."
                      docker compose -f docker-compose.prod.yml down || true
                      echo "Removing old image..."
                      docker image rm $DOCKER_IMAGE || true
                      echo "Logging into GitHub Container Registry..."
                      echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
                      echo "Pulling new image..."
                      docker pull $DOCKER_IMAGE
                      echo "Starting new containers..."
                      export REGISTRY=${{ env.REGISTRY }}
                      export IMAGE_NAME=${{ env.IMAGE_NAME }}
                      export TAG=latest
                      docker compose -f docker-compose.prod.yml up -d
                      echo "Deployment complete!"